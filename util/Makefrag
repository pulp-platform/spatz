# Copyright 2023 ETH Zurich and University of Bologna.
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

# Author: Matheus Cavalcante, ETH Zurich

# Root
SHELL = /usr/bin/env bash
SPATZ_DIR ?= $(shell git rev-parse --show-toplevel 2>/dev/null || echo $$SPATZ_DIR)
ROOT_DIR  ?= ${SPATZ_DIR}

# Binaries
INSTALL_PREFIX        ?= install
INSTALL_DIR           ?= ${ROOT_DIR}/${INSTALL_PREFIX}
LLVM_INSTALL_DIR      ?= ${INSTALL_DIR}/llvm
GCC_INSTALL_DIR       ?= ${INSTALL_DIR}/riscv-gcc
SPIKE_INSTALL_DIR     ?= ${INSTALL_DIR}/riscv-isa-sim
BENDER_INSTALL_DIR    ?= ${INSTALL_DIR}/bender
VERILATOR_INSTALL_DIR ?= ${INSTALL_DIR}/verilator

# Support for local override
BENDER ?= ${BENDER_INSTALL_DIR}/bin/bender
DASM   ?= ${SPIKE_INSTALL_DIR}/bin/spike-dasm
VLT    ?= ${VERILATOR_INSTALL_DIR}/bin/verilator_bin
CMAKE  ?= cmake-3.18.1
PYTHON ?= python3.6
CC     ?= gcc-11.2.0
CXX    ?= g++-11.2.0

MATCH_END := '/+incdir+/ s/$$/\/*\/*/'
MATCH_BGN := 's/+incdir+//g'
SED_SRCS  := sed -e ${MATCH_END} -e ${MATCH_BGN}
TB_SRCS   := $(wildcard ${ROOT}/hw/ip/snitch_test/*.sv)
TB_DIR    := ${ROOT}/hw/ip/snitch_test/src

VSIM_BENDER   += -t test -t rtl -t simulation -t spatz -t spatz_test -t snitch_test
VSIM_SOURCES  := $(shell ${BENDER} script flist ${VSIM_BENDER} | ${SED_SRCS})
VSIM_BUILDDIR := work-vsim

# fesvr is being installed here
FESVR          ?= ${MKFILE_DIR}work
FESVR_VERSION  ?= c663ea20a53f4316db8cb4d591b1c8e437f4a0c4

VLT_BUILDDIR := work-vlt
VLT_FESVR     = $(VLT_BUILDDIR)/riscv-isa-sim
VLT_FLAGS    += -Wno-BLKANDNBLK
VLT_FLAGS    += -Wno-LITENDIAN
VLT_FLAGS    += -Wno-CASEINCOMPLETE
VLT_FLAGS    += -Wno-COMBDLY
VLT_FLAGS    += -Wno-CMPCONST
VLT_FLAGS    += -Wno-WIDTH
VLT_FLAGS    += -Wno-WIDTHCONCAT
VLT_FLAGS    += -Wno-UNSIGNED
VLT_FLAGS    += -Wno-UNOPTFLAT
VLT_FLAGS    += -Wno-MODDUP
VLT_FLAGS    += -Wno-PINMISSING
VLT_FLAGS    += -Wno-fatal
VLT_FLAGS    += --unroll-count 1024
VLT_FLAGS    += --timing
VLT_BENDER   += -t rtl -t spatz -t spatz_test -t snitch_test
VLT_SOURCES  := $(shell ${BENDER} script flist ${VLT_BENDER} | ${SED_SRCS})
VLT_CFLAGS   += -std=c++17 -fcoroutines
VLT_CFLAGS   += -I${VLT_BUILDDIR}/riscv-isa-sim -I${VLT_BUILDDIR} -I${VERILATOR_INSTALL_DIR}/share/verilator/include -I${VERILATOR_INSTALL_DIR}/share/verilator/include/vltstd -I${ROOT}/hw/ip/snitch_test/src

VLOGAN_FLAGS := -assert svaext
VLOGAN_FLAGS += -assert disable_cover
VLOGAN_FLAGS += -full64
VLOGAN_FLAGS += -kdb
VHDLAN_FLAGS := -full64
VHDLAN_FLAGS += -kdb

# default on target `all`
all:

#################
# Prerequisites #
#################
# Eventually it could be an option to package this statically using musl libc.
work/${FESVR_VERSION}_unzip:
	mkdir -p $(dir $@)
	wget -O $(dir $@)/${FESVR_VERSION} https://github.com/riscv/riscv-isa-sim/tarball/${FESVR_VERSION}
	tar xfm $(dir $@)${FESVR_VERSION} --strip-components=1 -C $(dir $@)
	touch $@

work/lib/libfesvr_vsim.a: work/${FESVR_VERSION}_unzip
	cd $(dir $<)/ && PATH=${SPIKE_INSTALL_DIR}/bin:${PATH} CC=${VSIM_HOME}/gcc-7.4.0-linux_x86_64/bin/gcc CXX=${VSIM_HOME}/gcc-7.4.0-linux_x86_64/bin/g++ ./configure --prefix `pwd`
	make -C $(dir $<) install-config-hdrs install-hdrs libfesvr.a
	mkdir -p $(dir $@)
	cp $(dir $<)libfesvr.a $@

work/lib/libfesvr_vcs.a: work/${FESVR_VERSION}_unzip
	cd $(dir $<)/ && PATH=${SPIKE_INSTALL_DIR}/bin:${PATH} ./configure --prefix `pwd`
	make -C $(dir $<) install-config-hdrs install-hdrs libfesvr.a
	mkdir -p $(dir $@)
	cp $(dir $<)libfesvr.a $@

# Build fesvr seperately for verilator since this might use different compilers
# and libraries than modelsim/vcs and
$(VLT_FESVR)/${FESVR_VERSION}_unzip:
	mkdir -p $(dir $@)
	wget -O $(dir $@)/${FESVR_VERSION} https://github.com/riscv/riscv-isa-sim/tarball/${FESVR_VERSION}
	tar xfm $(dir $@)${FESVR_VERSION} --strip-components=1 -C $(dir $@)
	touch $@

$(VLT_BUILDDIR)/lib/libfesvr.a: $(VLT_FESVR)/${FESVR_VERSION}_unzip
	cd $(dir $<)/ && PATH=${SPIKE_INSTALL_DIR}/bin:${PATH} ./configure --prefix `pwd`
	$(MAKE) -C $(dir $<) install-config-hdrs install-hdrs libfesvr.a
	mkdir -p $(dir $@)
	cp $(dir $<)libfesvr.a $@

#############
# Verilator #
#############
# Takes the top module name as an argument.
define VERILATE
	mkdir -p $(dir $@)
	$(BENDER) script verilator ${VLT_BENDER} ${DEFS} > $(dir $@)files
	$(VLT) \
		--Mdir $(dir $@) -f $(dir $@)files $(VLT_FLAGS) \
		-j $(shell nproc) --cc --build --top-module $(1)
	touch $@
endef

############
# Modelsim #
############

define QUESTASIM
	${VSIM} -c -do "source $<; quit" | tee $(dir $<)vsim.log
	@! grep -P "Errors: [1-9]*," $(dir $<)vsim.log
	@mkdir -p bin
	@echo "#!/bin/bash" > $@
	@echo 'echo `realpath $$1` > bin/logs/.rtlbinary' >> $@
	@echo '${VSIM} +permissive ${VSIM_FLAGS} -work ${MKFILE_DIR}/${VSIM_BUILDDIR} -c \
				-ldflags "-Wl,-rpath,${FESVR}/lib -L${FESVR}/lib -lfesvr_vsim -lutil" \
				$1 +permissive-off ++$$1' >> $@
	@chmod +x $@
	@echo "#!/bin/bash" > $@.gui
	@echo 'echo `realpath $$1` > bin/logs/.rtlbinary' >> $@
	@echo '${VSIM} +permissive ${VSIM_FLAGS} -work ${MKFILE_DIR}/${VSIM_BUILDDIR} \
				-ldflags "-Wl,-rpath,${FESVR}/lib -L${FESVR}/lib -lfesvr_vsim -lutil" \
				$1 +permissive-off ++$$1' >> $@.gui
	@chmod +x $@.gui
endef

#######
# VCS #
#######
work-vcs/compile.sh: ${VSIM_SOURCES} ${TB_SRCS}
	mkdir -p work-vcs
	${BENDER} script vcs ${VSIM_BENDER} ${DEFS} --vlog-arg="${VLOGAN_FLAGS}" --vcom-arg="${VHDLAN_FLAGS}" > $@
	chmod +x $@
	$@ > work-vcs/compile.log

########
# Util #
########

.PHONY: traces
traces: $(shell (ls bin/logs/trace_hart_*.dasm 2>/dev/null | sed 's/\.dasm/\.txt/') || echo "")

bin/logs/trace_hart_%.txt: bin/logs/trace_hart_%.dasm ${ROOT}/util/gen_trace.py
	$(DASM) < $< | $(PYTHON) ${ROOT}/util/gen_trace.py > $@

# make annotate
# Generate source-code interleaved traces for all harts. Reads the binary from
# the bin/logs/.rtlbinary file that is written at start of simulation in the vsim script
bin/logs/trace_hart_%.s: bin/logs/trace_hart_%.txt ${ROOT}/util/trace/annotate.py
	$(PYTHON) ${ROOT}/util/trace/annotate.py -q -o $@ $(BINARY) $<
BINARY ?= $(shell cat bin/logs/.rtlbinary)
annotate: $(shell (ls bin/logs/trace_hart_*.dasm 2>/dev/null | sed 's/\.dasm/\.s/') || echo "")
